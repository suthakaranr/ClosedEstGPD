ginv(C)
solve(C)
apply(A, 1, median)
#column medians
apply(A, 2, median)
#column standard deviations
apply(A, 2, sd)
sleep <- read.csv("C:/Users/piyadir/OneDrive - Western Washington University/Teaching/M445/Course notes/R Code/sleep.txt", sep="")
View(sleep)
#Question 3
sleep <- read.csv("sleep.txt",  header=T)
#Question 3
sleep <- read.table("sleep.txt",  header=T)
View(sleep)
y <- sleep$NonD
length(y)
sum(!is.na(y))
is.na(y)
!is.na(y)
#a vector without the missing values
w <- na.omit(y)
y[!is.na(y)]
#a vector without the missing values
w <- na.omit(y)
#or
w <- y[!is.na(y)]
#c
sleep17 <- data.frame(sleep[1:7,])
sleep17
#c
sleep17 <- data.frame(sleep[,1:7])
sleep17
mean(sleep17)
mean(!is.na(sleep17))
mean(!is.na(sleep17[,1:7]))
apply(!is.na(sleep17), 1, mean)
apply(!is.na(sleep17), 2, mean)
#c
sleep17 <- data.frame(sleep[,1:7])
sleep17
!is.na(sleep17)
mean(!is.na(sleep17))
mean(!is.na(sleep17)[,1:7])
mean(!is.na(sleep17))
mean(!is.na(sleep17)[,1])
colMeans(sleep17, na.rm=TRUE)
#d
boxplot(sleep17)
sleep35 <- sleep[,3:5]
sleep35
boxplot(sleep35)
boxplot(sleep35, main="Box Plot of the Sleep Data")
#e
tapply(sleep$Sleep, sleep$Danger, mean)
Sleep
#e
tapply(sleep$Sleep, sleep$Danger, mean, default=NA)
#e
tapply(sleep$Sleep, sleep$Danger, mean, default=FUN(integer(0)))
#e
tapply(sleep$Sleep, sleep$Danger, mean, default=integer(0))
#e
tapply(sleep$Sleep, sleep$Danger, mean, na.rm=TRUE)
v <- sample(1:6, m*B, replace=FALSE)
v <- sample(1:6, m*B, replace=TRUE)
#b
vmat <- matrix(v, nrow=1000, ncol=50)
#b
vmat <- matrix(v, nrow=10000, ncol=50)
v <- sample(1:6, m*B, replace=TRUE)
#b
vmat <- matrix(v, nrow=10000, ncol=50)
length(v)
v <- sample(1:6, m*B, replace=TRUE)
v <- sample(1:6, size=m*B, replace=TRUE)
length(v)
m*B
#Question 4
#a
m <- 50
B <- 10000
v <- sample(1:6, size=m*B, replace=TRUE)
#b
vmat <- matrix(v, nrow=10000, ncol=50)
#c
rowSums(vmat)
#c
rowSums(vmat, dims=2)
#c
rowSums(vmat, dims=1:50)
#c
rowSums(vmat, dims=1)
#c
rowSums(vmat, dims=10000)
#c
rowSums(vmat, dims=50)
#c
rowSums(vmat, dims=51)
#c
rowSums(vmat[1:B,], dims=51)
#c
rowSums(vmat[1:B,])
#c
rowSums(vmat)
#c
length(rowSums(vmat))
#c
length(rowSums(vmat[1:B,]))
#c
rowSums(vmat)
#d
mean(rowSums(vmat))
#c
x <- rowSums(vmat)
var(x)
#c
x <- rowSums(vmat)
#d
mean(x)
var(x)
mean(1:6)
mean(1:6)*50
var(1:6)*50*50
var(1:6)*50
var(1:6)*50*50
var(1:6)*50
var(1:6)*50*50
1+2+3+4+5+
6
/6
21/6
c(1:6)-3.5
sum(c(1:6)-3.5)^2
sum((c(1:6)-3.5)^2)
sum((c(1:6)-3.5)^2)*50
sum((c(1:6)-3.5)^2)*50/6
#e
hist(rowSums(vmat), freq=FALSE, breaks="Scott", xlab="Sum", main="Histogram of X")
##########HOmework 1 ##################
##Question 1
a <- 1:100
mean(a)
#[1] 50.5
#population variance is computed by dividing the sum of squared deviance
#by N=100 not N-1 as in "var" function
var.a <- sum((a-mean(a))^2)/100
var.a
#[1] 833.25
var.a/50
#[1] 16.665
##QUestion 2
b <- c(6.5,3.4,2.3,-0.4,-4.5,0.5,1.1,1.6,2.7,-0.5,1.1,-2.1)
A <- matrix(b, nrow=3, ncol=4)
#a
t(A)
#b
B <- A %*% t(A)
B
C <- t(A) %*% A
C
#c
library("MASS")
ginv(B)
solve(B)
ginv(C)
solve(C)
#row medians
apply(A, 1, median)
#column standard deviations
apply(A, 2, sd)
#Question 3
sleep <- read.table("sleep.txt",  header=T)
View(sleep)
#a
y <- sleep$NonD
length(y)
#number of values not missing
sum(!is.na(y))
#b - a vector without the missing values
w <- na.omit(y)
#or
w <- y[!is.na(y)]
#c
sleep17 <- data.frame(sleep[,1:7])
colMeans(sleep17, na.rm=TRUE)
#d
sleep35 <- sleep[,3:5]
boxplot(sleep35, main="Box Plot of the Sleep Data")
#e
tapply(sleep$Sleep, sleep$Danger, mean, na.rm=TRUE)
#Question 4
#a
m <- 50
B <- 10000
v <- sample(1:6, size=m*B, replace=TRUE)
#b
vmat <- matrix(v, nrow=10000, ncol=50)
#c
x <- rowSums(vmat)
#d
mean(x)
var(x)
#e
hist(rowSums(vmat), freq=FALSE, breaks="Scott", xlab="Sum", main="Histogram of X")
###################################################
### Similar to Example 3.1
A <- c(1,3,4,5,10)
# sampling without replacement (sample size = 3)
sample(A, size=3, replace = FALSE)
# [1] 10  5  1
# sampling with replacement (sample size = 3)
sample(A, size=3, replace = TRUE)
# [1] 3 4 4
# sampling with replacement (sample size = 3) with unequal probabilities
# (0.1, 0.2, 0.2, 0.3, 0.2)
# [1] 10  3  3
sample(A, size=3, replace = TRUE, prob = c(0.1, 0.2, 0.2, 0.3, 0.2))
# [1] 5  1 10
sample(A, size=3, replace = TRUE, prob = c(0.1, 0.2, 0.2, 0.3, 0.2))
sample(A, size=3, replace = TRUE, prob = c(0.1, 0.2, 0.2, 0.3, 0.2))
### Nonparametric bootstrap variance estimation
library(boot)
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
theta <- median(sample)
B <- 1000
# here, i is the random vector of indices.
# this i is necessary to randomly select observations.
med.fun <- function(x, i){return(median(x[i]))}
results <- boot(data=sample, statistic=med.fun, R=B)
thetas <- results$t
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% nonparametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
m <- length(sample)
theta <- median(sample)
mu <- mean(sample)
sigma <- sd(sample)
B <- 1000
thetas <- replicate(B, expr = {
x <- rnorm(m, mean = mu, sd = sigma)
median(x)
})
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% parametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
theta <- median(sample)
# Jackknife estimation
m <- length(sample)
thetas <- double(m)
# Leave-one-out algorithm
for(i in 1:m){
thetas[i] <- median(sample[-i])
}
# variance estimation
((m-1)/m)*sum((thetas-mean(thetas))^2)
# bias estimation
(m-1)*(mean(thetas)-theta)
library(boot)
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
theta <- median(sample)
B <- 1000
# here, i is the random vector of indices.
# this i is necessary to randomly select observations.
med.fun <- function(x, i){return(median(x[i]))}
results <- boot(data=sample, statistic=med.fun, R=B)
thetas <- results$t
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% nonparametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
#sample size.
m <- length(sample)
theta <- median(sample)
# create B = 1000 resamples.
B <- 1000
#  a vector that stores theta's from B resamples.
thetas <- double(B)
for (i in 1:B) {
# we do this one by one (but less efficient this way).
resample <- sample(sample, size=m, replace=TRUE)
thetas[i] <- median(resample)
}
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% nonparametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
install.packages("boot")
install.packages("boot")
library(boot)
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
theta <- median(sample)
B <- 1000
# here, i is the random vector of indices.
# this i is necessary to randomly select observations.
med.fun <- function(x, i){return(median(x[i]))}
results <- boot(data=sample, statistic=med.fun, R=B)
thetas <- results$t
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% nonparametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
#sample size.
m <- length(sample)
theta <- median(sample)
# create B = 1000 resamples.
B <- 1000
#  a vector that stores theta's from B resamples.
thetas <- double(B)
for (i in 1:B) {
# we do this one by one (but less efficient this way).
resample <- sample(sample, size=m, replace=TRUE)
thetas[i] <- median(resample)
}
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% nonparametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
# sample size.
m <- length(sample)
theta <- median(sample)
# create B = 1000 resamples.
B <- 1000
# a vector that stores theta's from B resamples.
thetas <- double(B)
for (i in 1:B) {
# we do this one by one (but less efficient this way).
resample <- rnorm(m, mean=mean(sample), sd=sd(sample))
thetas[i] <- median(resample)
}
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% parametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
sample <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
m <- length(sample)
theta <- median(sample)
mu <- mean(sample)
sigma <- sd(sample)
B <- 1000
thetas <- replicate(B, expr = {
x <- rnorm(m, mean = mu, sd = sigma)
median(x)
})
# variance estimation
var(thetas)
# percentile estimation at 2.5% and 97.5%.
# this is the same as a 95% parametric percentile bootstrap-based CI.
quantile(thetas, probs=c(0.025, 0.975))
# bias estimation
mean(thetas)-theta
x <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
m <- length(x)
mu0 <- 0
B <- 1000
abs.tstat <- abs(t.test(x, mu=mu0)$statistic)
# Student's t-distribution based p-value
t.test(x, mu=mu0)$p.value
# create resamples
x.star <- x - mean(x) + mu0
set.seed(10)
xb <- sample(x.star, (m*B), replace=TRUE)
# store the b-th random sample in the b-th row of the matrix.
xbmat <- matrix(xb, nrow=B, ncol=m)
# apply() function calculates the test statistic value for each row.
abs.tb <- abs(apply(xbmat, 1, function(x){t.test(x, mu=mu0)$statistic}))
# p-value calculation
p.value <- mean(abs.tb >= abs.tstat)
p.value
x <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
m <- length(x)
mu0 <- 0
B <- 1000
abs.tstat <- abs(t.test(x, mu=mu0)$statistic)
# Student's t-distribution based p-value
t.test(x, mu=mu0)$p.value
# create resamples
x.star <- x - mean(x) + mu0
#set.seed(10)
xb <- sample(x.star, (m*B), replace=TRUE)
# store the b-th random sample in the b-th row of the matrix.
xbmat <- matrix(xb, nrow=B, ncol=m)
# apply() function calculates the test statistic value for each row.
abs.tb <- abs(apply(xbmat, 1, function(x){t.test(x, mu=mu0)$statistic}))
# p-value calculation
p.value <- mean(abs.tb >= abs.tstat)
p.value
x <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
m <- length(x)
mu0 <- 0
B <- 1000
abs.tstat <- abs(t.test(x, mu=mu0)$statistic)
# Student's t-distribution based p-value
t.test(x, mu=mu0)$p.value
# create resamples
x.star <- x - mean(x) + mu0
set.seed(1)
xb <- sample(x.star, (m*B), replace=TRUE)
# store the b-th random sample in the b-th row of the matrix.
xbmat <- matrix(xb, nrow=B, ncol=m)
# apply() function calculates the test statistic value for each row.
abs.tb <- abs(apply(xbmat, 1, function(x){t.test(x, mu=mu0)$statistic}))
# p-value calculation
p.value <- mean(abs.tb >= abs.tstat)
p.value
x <- c(0.55, 0.72, -1.27, 0.03, -0.95, -0.49)
m <- length(x)
mu0 <- 0
B <- 1000
abs.tstat <- abs(t.test(x, mu=mu0)$statistic)
# Student's t-distribution based p-value
t.test(x, mu=mu0)$p.value
# create resamples
x.star <- x - mean(x) + mu0
set.seed(10)
xb <- sample(x.star, (m*B), replace=TRUE)
# store the b-th random sample in the b-th row of the matrix.
xbmat <- matrix(xb, nrow=B, ncol=m)
# apply() function calculates the test statistic value for each row.
abs.tb <- abs(apply(xbmat, 1, function(x){t.test(x, mu=mu0)$statistic}))
# p-value calculation
p.value <- mean(abs.tb >= abs.tstat)
p.value
1 - exp(-1)
1/3+3/2+7
pnorm(1.5, lower.tail = T)
pnorm(1.5, lower.tail = F)
setwd("~/EfficientClosedGPD")
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
x = runif(25) # Generate sample
Method1(x) # Method 1
Method2(x) # Method 2
Method3(x) # Method 3
MethodQM(x) # Method QM
MethodPOS(x) # Method POS
MethodPOS(x) # Method POS
MethodLCVM(x) # Method LCVM
x = rgpd2(50, 2,4) # Generate sample
Method1(x) # Method 1
Method2(x) # Method 2
Method3(x) # Method 3
MethodQM(x) # Method QM
MethodPOS(x) # Method POS
MethodLCVM(x) # Method LCVM
x = runif(40)
Method1(x) # Method 1
Method2(x) # Method 2
Method3(x) # Method 3
MethodQM(x) # Method QM
MethodPOS(x) # Method POS
MethodLCVM(x) # Method LCVM
MethodPOS
library(stats)
x = runif(40)
Method1(x) # Method 1
Method2(x) # Method 2
Method3(x) # Method 3
MethodQM(x) # Method QM
MethodPOS(x) # Method POS
MethodLCVM(x) # Method LCVM
rm(list = ls())
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
x = rgpd2(50, 2,4) # Generate sample
library(stats)
x = runif(40)
Method1(x) # Method 1
Method2(x) # Method 2
Method3(x) # Method 3
MethodQM(x) # Method QM
MethodPOS(x) # Method POS
MethodLCVM(x) # Method LCVM
rm(list = ls())
library(devtools);
load_all("."); # Working directory should be in the package SCC_R_package
x = rgpd2(50, 2,4) # Generate sample
library(stats)
#x = runif(40)
Method1(x) # Method 1
Method2(x) # Method 2
Method3(x) # Method 3
MethodQM(x) # Method QM
MethodPOS(x) # Method POS
MethodLCVM(x) # Method LCVM
